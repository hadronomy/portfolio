---
import type { HTMLAttributes } from 'astro/types';
import { Icon } from 'astro-icon/components';

interface Props extends HTMLAttributes<'button'> {}

const { class: className, ...props } = Astro.props;
---

<button
  class:list={[
    'flex relative h-8 w-8 theme-toggle-button overflow-hidden justify-center items-center',
    className,
  ]}
  {...props}
>
  <canvas class="absolute h-8 w-8 theme-toggle"></canvas>
</button>

<script>
  import { Rive } from '@rive-app/canvas';

  let r: Rive;

  const getTrigger = (name: string, rive: Rive = r) => {
    const inputs = rive.stateMachineInputs('theme');
    return inputs ? inputs.find((input) => input.name === name) : null;
  };

  const toggleTheme = () => {
    const element = document.documentElement;
    element.classList.toggle('dark');
    const isDark = element.classList.contains('dark');
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    getTrigger('toggleTheme')?.fire();
  };

  document.addEventListener('astro:page-load', () => {
    const buttons = document.querySelectorAll<HTMLButtonElement>('button.theme-toggle-button');
    buttons.forEach((button) => button.addEventListener('click', toggleTheme));

    const canvas = document.querySelector<HTMLCanvasElement>('canvas.theme-toggle');
    if (!canvas) throw new Error('Canvas not found');

    r = new Rive({
      src: '/rive/animated-theme-icon.riv',
      canvas: canvas,
      autoplay: true,
      stateMachines: 'theme',
      onLoad: () => {
        r.resizeDrawingSurfaceToCanvas();
      },
    });
  });
</script>
